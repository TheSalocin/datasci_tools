---------------------------------------------------------------
Stage 1: Creating Documentation 
Link: https://towardsdatascience.com/documenting-python-code-with-sphinx-554e1d6c4f6d

Background: 
1) rst (reStructuredText): entry point for the website
- they can be like index.rst

Step 1: Setup Directory
1) install sphinx
- sphinx is what does all of the automatic html generation

pip install sphinx sphinx_rtd_theme


2) Create a docs folder in same directory as setup.py

mkdir docs
cd docs


3) Inside docs folder run: 
- can hit enter to accept all of the defaults
- will create a documentation directory (along with make.bat file) that will be used later to generate the html

sphinx-quickstart


Step 2: Editing config

1) in conf.py :

    a. change os.path.abspath('.') to os.path.abspath('..')

import os
import sys
sys.path.insert(0, os.path.abspath('..'))


    - this will tell sphinx to look outside the directory for modules

    b. change extensions variable to:

import sphinx_rtd_theme

extensions = [
"sphinx_rtd_theme",
"sphinx.ext.autodoc",#converts the doc string into documentation
"sphinx.ext.viewcode",
"sphinx.ext.napoleon"
]

    c. Change the html_theme

html_theme = 'sphinx_rtd_theme'


    d. Add the following to exclude_patterns

exclude_patterns = ['*.ipynb_checkpoints*']

    e. Add the following to bottom: 
        def skip(app, what, name, obj, would_skip, options):
            if name == "__init__":
                return False
            return would_skip

        def setup(app):
            app.connect("autodoc-skip-member", skip)

-*******************--- whole conf.py

# Configuration file for the Sphinx documentation builder.
#
# For the full list of built-in configuration values, see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Project information -----------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#project-information
import os
import sys
sys.path.insert(0, os.path.abspath('..'))

project = '[NEED TO INSERT MODULE NAME]'
copyright = '2023, Brendan Celii'
author = 'Brendan Celii'

# -- General configuration ---------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration

import sphinx_rtd_theme

extensions = [
"sphinx_rtd_theme",
"sphinx.ext.autodoc",#converts the doc string into documentation
"sphinx.ext.viewcode",
"sphinx.ext.napoleon"
]

templates_path = ['_templates']
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store','*.ipynb_checkpoints*']



# -- Options for HTML output -------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output

html_theme = 'sphinx_rtd_theme'
html_static_path = ['_static']


def skip(app, what, name, obj, would_skip, options):
    if name == "__init__":
        return False
    return would_skip

def setup(app):
    app.connect("autodoc-skip-member", skip)

-*******************--- END whole conf.py






Step 3: Generate the other .rst files (which will have our code)

1) go out of docs directory to base directory
2) run "sphinx-apidoc -o docs [package_name]/"
- references the folder where all the code sits
_ Output: [package_name].rst and modules.rst files are generated

sphinx-apidoc -o docs [package_name]/

3) go into index.rst and add modules to file:

.. toctree::
    :maxdepth: 2
    :caption: Contents:
    
    modules.rst

Step 4: Generating the html files:

1) Go into docs folder
2) run: 
    
make clean html

2b) Clean up any of the errors shown in the make clean html

3) Check: at this point should be able to see html files

    a. go to the docs > _build > html folder
    b. open up index.html
    c. once on that file, top right corner has button for "show preview" (only if Live Preview extension is installed)
    d. Can then click around and see the rendering

---------------------------------------------------------------
Stage 2: Hosting on Github Pages (using github actions workflow)
Link: https://medium.com/practical-coding/documenting-your-python-library-from-zero-to-website-488f87ae58f5

0) Make sure the following settings are set

Settings > Actions > General 
    > Workflow Permissions > Read and write Permissions
    > check the box for "Allow Github Actions to create and approve pull requests"

1) added following the .gitignore 

__pycache__/
.DS_Store
docs/_build/
docs/_static/
docs/_templates

2) Creating the github actions workflow
    a) Create directory and yml file

mkdir .github/;mkdir .github/workflows;vim .github/workflows/docs.yml
    b) Fill in yaml file with:

name: docs
on:
  push:
    branches:
      - main

jobs:
  docs:
    name: Docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Upgrade pip
        run: |
          # install pip=>20.1 to use "pip cache dir"
          python3 -m pip install --upgrade pip

      # - name: Get pip cache dir
      #   id: pip-cache
      #   run: echo "::set-output name=dir::$(pip cache dir)"

      - name: Install requirements
        run: |
          pip3 install sphinx-rtd-theme

      - name: Install dependencies
        run: |
          python3 -m pip install --use-deprecated=legacy-resolver  -r ./requirements.txt
          #pip3 install git+https://github.com/bacelii/python_tools.git

      - name: Build docs
        run: |
          cd docs
          make html

      # https://github.com/peaceiris/actions-gh-pages
      - name: Deploy
        if: success()
        uses: peaceiris/actions-gh-pages@v3
        with:
          publish_branch: gh-pages
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/_build/html/



3) push changes

4) Go to the settings of your github page 
    a. Settings tab
    b. Under Pages (on left)
    c. change sources to to "gh-pages" branch
    - make sure directory is /(root)
    - might need to change it from main back to gh-pages to work

5) Push change to main branch and monitor progress:
    a. Go to actions
    b. Click on docs > then latest run
    c. Click "Docs" on left > should see the process of job

Final webpage should be : https://bacelii.github.io/[package_name]/


------------------------------------------
Stage 3: Updating documentation

0) Go out of docs folder and run (if have newly added py files or else they won't be logged):
    sphinx-apidoc -o docs [package_name]/ --force
1) Go into docs folder
2) run: 
    make clean html
    make html

2b) Clean up any of the errors shown in the make clean html

3) Check: at this point should be able to see html files

    a. go to the docs > _build > html folder
    b. open up index.html
    c. once on that file, top right corner has button for "show preview" (only if Live Preview extension is installed)
    d. Can then click around and see the rendering

4) Push changes to main branch (this will do a separate build of html files)
5) verify changes at the final website:
    https://bacelii.github.io/[package_name]/








------------------------------------------------------------------
Old Notes: 

Good link on how to create automatic documentation landing page

https://medium.com/practical-coding/documenting-your-python-library-from-zero-to-website-488f87ae58f5

-- explains need to change the docs.yml to "main" instead of master or else it won't trigger anything
https://stackoverflow.com/questions/61989951/github-action-workflow-not-running

Process:
1) pip3 install -U sphinx
2) Within project create docs folder, go into folder and run "sphinx-quickstart"
3) Will automatically create a lot of files
- Makefile: builds the proect
- conf.py: specifies the build
- index.rst (reStructuredText): entry point for the website
4) to make website, run: make html
5) pip3 install sphinx-rtd-theme
6) add some more stuff to the conf.py
7) Generate more .rst files in the doc folder: sphinx-apidoc -o . ../autos
8) link the .rst files
9) add some more code to the conf.py and rerun the html
    make clean html
    make html
    
    




For publishing to github pages:
1) make sure branch is gh-pages and make sure directory is /(root)


A better link: https://towardsdatascience.com/documenting-python-code-with-sphinx-554e1d6c4f6d






push a commit after the docs.yaml created, make sure to change the docs.yaml to be master if no actions deployed

